generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type OrdersOrderItems {
  id          String @map("_id") @db.ObjectId
  productName String
  price       Int
  productId   String @db.ObjectId
  qty         Int
}

type OrdersShippingAddress {
  address    String
  apartment  String
  city       String
  postalCode String?
}

model ProductsReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  name      String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  productId String   @db.ObjectId

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  isAdmin        Boolean   @default(false)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  orders   Orders[]
  reviews  ProductsReviews[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Orders {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String?
  isDelivered     Boolean               @default(false)
  isPaid          Boolean               @default(false)
  itemsPrice      Int
  orderItems      OrdersOrderItems[]
  paidAt          DateTime              @db.Date
  paymentMethod   String
  phone           Int
  screenshot      String
  shippingAddress OrdersShippingAddress
  shippingPrice   Int
  taxPrice        Int
  totalPrice      Int
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  userId          String                @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  brand              String
  category           String
  countInStock       Int
  createdAt          DateTime @default(now())
  description        String?
  discountPercentage Int?
  image              String
  isFeaturedProduct  Boolean  @default(false)
  isOnSale           Boolean  @default(false)
  name               String
  numReviews         Int
  price              Int
  rating             Int
  updatedAt          DateTime @updatedAt

  reviews ProductsReviews[]
}
